let Schema,hash,compare,sign,SECRET,pick,conn1;_fa6‍.x([["default",()=>_fa6‍.o]]);_fa6‍.w("mongoose",[["Schema",["Schema"],function(v){Schema=v}]]);_fa6‍.w("bcryptjs",[["hash",["hash"],function(v){hash=v}],["compare",["compare"],function(v){compare=v}]]);_fa6‍.w("jsonwebtoken",[["sign",["sign"],function(v){sign=v}]]);_fa6‍.w("../constants",[["SECRET",["SECRET"],function(v){SECRET=v}]]);_fa6‍.w("lodash",[["pick",["pick"],function(v){pick=v}]]);_fa6‍.w("../database",[["conn1",["conn1"],function(v){conn1=v}]]);






const UserSchema = new Schema({
  username: {
    type: String,
    required: true,
  },
  password: {
    type: String,
    required: true,
  },
  name: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
  },
  role: {
    type: String,
    enum: ["student", "teacher"],
  },
  class: {
    type: String,
    required: false,
  },
});

UserSchema.pre("save", async function (next) {
  let user = this;
  if (!user.isModified("password")) return next();
  user.password = await hash(user.password, 12);
  next();
});

UserSchema.methods.comparePassword = async function (password) {
  return await compare(password, this.password);
};

UserSchema.methods.generateJWT = async function () {
  let payload = {
    id: this._id,
    role: this.role,
  };
  return await sign(payload, SECRET, { expiresIn: "1 hour" });
};

UserSchema.methods.getUserInfo = function () {
  return pick(this, ["_id", "name", "email", "role", "class"]);
};

const User = conn1.model("users", UserSchema);
_fa6‍.d(User);
