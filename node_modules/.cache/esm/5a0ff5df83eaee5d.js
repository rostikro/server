let passport,User,Strategy,ExtractJwt,secretOrKey;_83e‍.w("passport",[["default",["passport"],function(v){passport=v}]]);_83e‍.w("../models",[["User",["User"],function(v){User=v}]]);_83e‍.w("passport-jwt",[["Strategy",["Strategy"],function(v){Strategy=v}],["ExtractJwt",["ExtractJwt"],function(v){ExtractJwt=v}]]);_83e‍.w("../constants",[["SECRET",["secretOrKey"],function(v){secretOrKey=v}]]);




const opts = {
  secretOrKey,
  jwtFromRequest: ExtractJwt.fromAuthHeaderWithScheme("Bearer"),
};

passport.use(
  new Strategy(opts, async ( payload , done) => {
    try {
      let user = await User.findById(payload.id);
      if (!user) throw new Error("User not found");
      if(user.role !== payload.role) throw new Error("Hacker");
      return done(null, user.getUserInfo());
    } catch (e) {
        _83e‍.g.console.log(e);
      done(null, false);
    }
  })
);
